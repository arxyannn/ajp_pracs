✅ FULL SOLID ANALYSIS
✅ S - Single Responsibility Principle (SRP)
The Book class only stores and provides book data: title, author, isbn.

It does not perform unrelated operations like borrowing or printing — perfect SRP.

✅ SRP is fully satisfied.

✅ O - Open/Closed Principle (OCP)
You defined an abstract class LibraryItem, which is open for extension (e.g., by LibraryBook) but closed for modification.

If tomorrow you want to add Magazine, DVD, or EBook, you can do it by extending LibraryItem — no change to the base class.

✅ OCP is followed correctly.

✅ L - Liskov Substitution Principle (LSP)
LibraryBook is a subclass of LibraryItem.

It can be substituted wherever LibraryItem is expected (like in your main method), and behavior stays consistent.

The methods behave as expected without breaking functionality or expectations.

✅ LSP is well implemented.

✅ I - Interface Segregation Principle (ISP)
You split functionality into two focused interfaces: Borrowable and Readable.

LibraryBook implements only what it needs.
For example, if you had a ReferenceBook, it could just implement Readable.

✅ ISP is properly followed.

✅ D - Dependency Inversion Principle (DIP)
This is subtle in your example. You're depending on abstractions, not concrete implementations:

LibraryItem is an abstraction.

The main method uses LibraryItem item = new LibraryBook(...) — this is constructor-based inversion.

If you wanted to improve DIP further, you could inject services (e.g., NotificationService) via constructor.

✅ DIP is lightly followed and acceptable for this context.