✅ S – Single Responsibility Principle (SRP)
Definition:

A class should have one, and only one, reason to change.

Why?

It keeps code modular, maintainable, and testable.

If a class has only one responsibility, it's easier to fix bugs, extend features, or reuse it.

Applied here:

The Book class only manages book data (title).

The LibraryManager class only manages borrowing logic and notifications — it doesn't print books or store them.

This makes the system modular and predictable. If tomorrow book info changes (e.g., adding author or ISBN), only Book needs to change.
If borrowing rules change, only LibraryManager changes.

✅ D – Dependency Inversion Principle (DIP)
Definition (in two parts):

High-level modules should not depend on low-level modules. Both should depend on abstractions.

Abstractions should not depend on details. Details should depend on abstractions.

Why?

This leads to loose coupling, which makes the system flexible and testable.

You can swap out implementations without touching core business logic.

Applied here:

LibraryManager (the high-level module) does not directly use EmailService.

Instead, it depends on the NotificationService interface (abstraction).

This means tomorrow you could add SMSService, PushNotificationService, or SlackNotifier without changing LibraryManager.